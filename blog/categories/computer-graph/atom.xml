<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Computer Graph | Morry's Blog]]></title>
  <link href="http://sparkmorry.github.io/blog/categories/computer-graph/atom.xml" rel="self"/>
  <link href="http://sparkmorry.github.io/"/>
  <updated>2014-04-07T12:54:15+08:00</updated>
  <id>http://sparkmorry.github.io/</id>
  <author>
    <name><![CDATA[Mengli Xia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[曲线参数化的Javascript实现（代码篇）]]></title>
    <link href="http://sparkmorry.github.io/blog/2014/02/06/qu-xian-can-shu-hua-de-javascriptshi-xian-%28dai-ma-pian-%29/"/>
    <updated>2014-02-06T22:48:03+08:00</updated>
    <id>http://sparkmorry.github.io/blog/2014/02/06/qu-xian-can-shu-hua-de-javascriptshi-xian-(dai-ma-pian-)</id>
    <content type="html"><![CDATA[<p><a href="http://sparkmorry.github.io/blog/2014/01/30/qu-xian-can-shu-hua-de-javascriptshi-xian-%28dai-ma-pian-%29/">在曲线参数化的Javascript实现（理论篇）</a>中推出了曲线弧长积分的公式，以及用二分法通过弧长s来查找样条曲线上对应的u，再求Q(u)的值。弧长积分函数如下：</p>

<p><img src="http://sparkmorry.github.io/images/posts/Param/ds.png" style="width:300px;"></img>，其中<img src="http://sparkmorry.github.io/images/posts/Param/ABCDE.png" style="width:200px;"></img>－－－－－公式1</p>

<p>Simpson展开后</p>

<p><img src="http://sparkmorry.github.io/images/posts/Param/Simpson.png" style="width:300px;"></img>－－－－－－－公式2</p>

<p>这里的f(u)就是上面的弧长s的求值函数，既样条曲线拟合函数Q(u)的积分</p>

<p>这部分具体代码如下：1.计算f(u)的系数ABCDE</p>

<pre><code>CParametric.prototype.SegCoef = function(CSpline, o)
{        
    p0.x=this.k[0]*CSpline.Spline[o].x+this.k[1]*CSpline.Spline[o+1].x+this.k[2]*CSpline.Spline[o+2].x+this.k[3]*CSpline.Spline[o+3].x;
    p1.x=this.k[4]*CSpline.Spline[o].x+this.k[5]*CSpline.Spline[o+1].x+this.k[6]*CSpline.Spline[o+2].x+this.k[7]*CSpline.Spline[o+3].x;
    p2.x=this.k[8]*CSpline.Spline[o].x+this.k[9]*CSpline.Spline[o+1].x+this.k[10]*CSpline.Spline[o+2].x+this.k[11]*CSpline.Spline[o+3].x;
    p3.x=this.k[12]*CSpline.Spline[o].x+this.k[13]*CSpline.Spline[o+1].x+this.k[14]*CSpline.Spline[o+2].x+this.k[15]*CSpline.Spline[o+3].x;

    p0.y=this.k[0]*CSpline.Spline[o].y+this.k[1]*CSpline.Spline[o+1].y+this.k[2]*CSpline.Spline[o+2].y+this.k[3]*CSpline.Spline[o+3].y;
    p1.y=this.k[4]*CSpline.Spline[o].y+this.k[5]*CSpline.Spline[o+1].y+this.k[6]*CSpline.Spline[o+2].y+this.k[7]*CSpline.Spline[o+3].y;
    p2.y=this.k[8]*CSpline.Spline[o].y+this.k[9]*CSpline.Spline[o+1].y+this.k[10]*CSpline.Spline[o+2].y+this.k[11]*CSpline.Spline[o+3].y;
    p3.y=this.k[12]*CSpline.Spline[o].y+this.k[13]*CSpline.Spline[o+1].y+this.k[14]*CSpline.Spline[o+2].y+this.k[15]*CSpline.Spline[o+3].y;

    this.A=9*(p0.x*p0.x+p0.y*p0.y);
    this.B=12*(p0.x*p1.x+p0.y*p1.y);
    this.C=6*(p0.x*p2.x+p0.y*p2.y)+4*(p1.x*p1.x+p1.y*p1.y);
    this.D=4*(p1.x*p2.x+p1.y*p2.y);
    this.E=p2.x*p2.x+p2.y*p2.y;
}
</code></pre>

<p>这里的k数组是Cardinal样条曲线的Mc矩阵，具体内容可以参考Cardinal样条曲线的Javascript实现（理论篇）。这里的p0,p1,p2,p3就是公式1里的ax,ay,bx,by,cx,cy,dx,dy。从而求得积分函数系数。</p>

<p>2.计算扩展的Simpson方法展开后得到的积分函数</p>

<pre><code>CParametric.prototype.ArcLength = function(ustart, uend){
    var h,sum,u;
    var i;
    h=(uend-ustart)*1.0/ITERATION_COUNT; //扩展的Simposon方法的阶数
    sum=0;
    u=ustart+h;

    for(var i=2; i &lt;= ITERATION_COUNT; i++){
        if(!(i&amp;1)){
            sum += 4.0*this.ArcIntergrand(u);
        }
        else{
            sum += 2.0*this.ArcIntergrand(u);
        }
        u += h;
    }
    return(h*this.ArcIntergrand(ustart)+sum+this.ArcIntergrand(uend)/3.0);
}
</code></pre>

<p>这里的ITERATION_COUNT是扩展的Simposon方法的阶数，既公式2中的n，其中的ArcIntergrand(u)就是求fi的值，代码如下：</p>

<pre><code>CParametric.prototype.ArcIntergrand = function(u)
{
    var f;
    f=this.A*u*u*u*u+this.B*u*u*u+this.C*u*u+this.D*u+this.E;
    f=Math.sqrt(f);
    return f;
}
</code></pre>

<p>3.建立s－u索引表</p>

<p>上面的积分函数只能得到没一个曲线段上一个u对应s的值，而一整条样条曲线由多个小曲线段组成，比如计算第二段曲线上累加的s的值的时候只要把前面那段曲线的总长作为一个基数加上去就可以了。建立了s－u索引表之后就可以用二分法来查找每个给定的s对应的u的值了。因为这个函数是严格单调递增的，所以这个索引表肯定是升序的，就可以用二分法来查找。具体代码如下：</p>

<pre><code>CParametric.prototype.SetLengths = function(spline, npoints){
    var no_segments;    //u分割的精度
    var arcLength;
    this.seg_lengths = new Array();

    no_segments = npoints-3;
    arcLength = 0;

    this.seg_lengths[0]=0;
    for(var i=0; i&lt;no_segments; i++){
        this.SegCoef(spline, i);
        arcLength += this.ArcLength(0.,1.);   //ArcLength(0,1)就是前面一个曲线段的总长
        this.seg_lengths[i+1] = arcLength;
    }
    this.total_length = arcLength;
    for(var i=1; i&lt;no_segments; i++){
        this.seg_lengths[i] /= this.total_length;  //s归一化
    }
}
</code></pre>

<p>因为弧长累加的值较大，所以对其进行归一化之后可以得到更标准的弧长值。</p>

<p>4.二分法计算弧长为seg的曲线上的点的位置pt</p>

<pre><code>CParametric.prototype.ArcLengthPoint = function(spline, seg){
    var uL=0., uR=1., usearch;
    var segment_dist, ssearch;
    var segment_no=0;

    do{
        segment_no++;
    }while(this.seg_lengths[segment_no] &lt; seg);
    segment_no --;
    segment_dist = this.total_length*(s-this.seg_lengths[segment_no]);

    this.SegCoef(spline,segment_no);

    do{
        usearch = (uL+uR)/2;
        ssearch = this.ArcLength(uL, usearch);

        if(segment_dist &lt; ssearch+SEARCH_TOL){
            uR=usearch;
        }
        else{
            uL=usearch;
            segment_dist -= ssearch;
        }
    }while((segment_dist&gt;ssearch+SEARCH_TOL) || (segment_dist&lt;ssearch-SEARCH_TOL));
    this.GetPointOnSpline(usearch);

};
</code></pre>

<p>就是普通的二分查找法，给定一个弧长seg，在函数曲线上找到对应的u的值，返回的usearch就是在指定精度var SEARCH_TOL=0.5（可以任意指定）的情况下得到的u的值。再通过调用this.GetPointOnSpline(usearch)函数来计算u=usearch时对应的Q(u)的值。</p>

<pre><code>CParametric.prototype.GetPointOnSpline=function(usearch){
    this.pt[pointnum]= new CPT();
    this.pt[pointnum].x=p0.x*usearch*usearch*usearch+p1.x*usearch*usearch+p2.x*usearch+p3.x;
    this.pt[pointnum].y=p0.y*usearch*usearch*usearch+p1.y*usearch*usearch+p2.y*usearch+p3.y;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[曲线参数化的Javascript实现（理论篇）]]></title>
    <link href="http://sparkmorry.github.io/blog/2014/01/30/qu-xian-can-shu-hua-de-javascriptshi-xian-%28li-lun-pian-%29/"/>
    <updated>2014-01-30T22:48:03+08:00</updated>
    <id>http://sparkmorry.github.io/blog/2014/01/30/qu-xian-can-shu-hua-de-javascriptshi-xian-(li-lun-pian-)</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cardinal样条曲线的Javascript实现(代码篇)]]></title>
    <link href="http://sparkmorry.github.io/blog/2014/01/29/cardinalyang-tiao-qu-xian-de-javascriptshi-xian-dai-ma-pian/"/>
    <updated>2014-01-29T11:08:00+08:00</updated>
    <id>http://sparkmorry.github.io/blog/2014/01/29/cardinalyang-tiao-qu-xian-de-javascriptshi-xian-dai-ma-pian</id>
    <content type="html"><![CDATA[<p>由上一篇文章得到了Cardinal曲线的矩阵表达式，下面就这个矩阵表达式就可以来对曲线进行插值了。</p>

<p>这里选用了JS来实现，完全是因为之前交作业的时候还不知道怎么在Xcode里建完整的C++OpenGL的项目，所以就用js在浏览器这个最大的跨平台UI上写。。</p>

<p>先看之前得到的Cardinal插值的样条曲线的矩阵，对每一段曲线PkPk+1来说，都可以通过拟合一个被参数化为P(u)函数（0&lt;= u &lt;=1）的图形的形式：</br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/Cardinal5.png" style="width:220px;"></img>，其中
<img src="http://sparkmorry.github.io/images/posts/Cardinal/Cardinal6.png" style="width:220px;"></img></br></p>

<p>同样，M*P得到的是系数矩阵[a b c d]的转置，s是引入的表示每个连接点处曲线尖锐程度的变量－张量</p>

<p>所以我们现在的期望是</p>

<p>输入：n个控制点的xy轴坐标数组x[],y[]，张量tension，每两个控制点之间插入的密度grain</p>

<p>输出：插值好的样条曲线上控制点的一个数组</p>

<p>1.构造函数 function CSpline(x, y, grain, tension, n)</p>

<p>拥有的成员变量和成员函数：</p>

<pre><code>function CSpline(x, y, grain, tension, n) {   
    var jd = new Array(100);  //用户输入的控制点位置数组，临时变量存储
    this.n0=n;   //控制点个数
    this.m = new Array(16);  //Mc矩阵
    this.Spline = new Array(1024);  //插值好的控制点数组
    CSpline.prototype.GetCardinalMatrix = function(a1) {}    //通过给定的tension值生成Mc矩阵
    CSpline.prototype.Matrix = function(a, b, c, d, u){}   //计算P(u)的值，xy分量均相同
    CSpline.prototype.CubicSpline = function(np, knots, grain, tension) {}   //插值函数

    //临时函数，建立曲线控制点数组jd，并调用CubicSpline函数计算插值曲线
    function CSpline(x, y, grain, tension, n)      
    { 
        for(var i=1; i&lt;=np; i++){
        　　jd[i] = new CPT(x[i-1],y[i-1]);   //内部点
        }
        jd[0] = new CPT(x[0],y[0]);  //补上隐含的整条曲线起始点
        jd[np+1] = new CPT(x[np-1],y[np-1]);    //补上隐含的整条曲线终止点
        np=np+2;   
        this.CubicSpline(np, jd, grain, tension);
    }
}      
</code></pre>

<p>这里成员变量通过构造函数分别在实例中存储，而成员函数则在对应的原型函数中存储。</p>

<p>2.计算Mc矩阵函数GetCardinalMatrix = function(a1)</p>

<p>根据输入的平滑度 tension 值计算Mc矩阵</p>

<pre><code>CSpline.prototype.GetCardinalMatrix = function(a1) {
    this.m[0]=-a1; this.m[1]=2.0-a1; this.m[2]=a1-2.; this.m[3]=a1;                 
    this.m[4]=2.*a1; this.m[5]=a1-3.; this.m[8]=-a1; this.m[9]=0.;
    this.m[12]=0.; this.m[13]=1.; this.m[6]=3.-2*a1; this.m[7]=-a1;
    this.m[10]=a1; this.m[11]=0.; this.m[14]=0.; this.m[15]=0.;
} 
</code></pre>

<p>这里m是一个4*4的矩阵，a1表示tension值</p>

<p>3.计算P(u)的值</p>

<p>输入4个点Pk-1,Pk,Pk+1,Pk+2的值(x分量或者y分量，以及参数化好的u值)，返回计算得到的P(u)的值</p>

<pre><code>CSpline.prototype.Matrix = function(p0, p1, p2, p3, u){ 
    //求解系数
    var a, b, c, d;
    a=this.m[0]*p0+this.m[1]*p1+this.m[2]*p2+this.m[3]*p3;    
    b=this.m[4]*p0+this.m[5]*p1+this.m[6]*p2+this.m[7]*p3; 
    c=this.m[8]*p0+this.m[9]*p1+this.m[10]*p2+this.m[11]*p3; 
    d=this.m[12]*p0+this.m[13]*p1+this.m[14]*p2+this.m[15]*p3; 
    return(d+u*(c+u*(b+u*a))); //au^3+bu^2+cu+d
}
</code></pre>

<p>4.主要绘制函数CSpline.prototype.CubicSpline = function(np, knots, grain, tension)</p>

<pre><code>CSpline.prototype.CubicSpline = function(np, knots, grain, tension) {
    alpha = new Array(50);
    var k0, kml, k1, k2;
        //获取Mc矩阵
        this.GetCardinalMatrix(tension);
        //对每两个关键点之间的插值点进行参数化到0～1之间
    for(var i=0; i&lt;grain; i++){
        alpha[i]=i*1.0/grain;
    }
        //从最开始的四个点开始，给第一段曲线插值
    kml = 0;
    k0 = 1;
    k1 = 2;
    k2 = 3;
    this.s = 0; //纪录总共插值后的点数
        //两次循环第一次对输入的控制点遍历，第二次对每两个控制点之间插值，分别计算xy分量上得出的插值后的函数值，k值分别＋1
    for(var i =1; i&lt;this.n0; i++){
        for(var j=0; j&lt;grain; j++){
            cpx = this.Matrix(knots[kml].x, knots[k0].x, knots[k1].x, knots[k2].x, alpha[j]);
            cpy = this.Matrix(knots[kml].y, knots[k0].y, knots[k1].y, knots[k2].y, alpha[j]);
            this.Spline[this.s] = new CPT(cpx, cpy);
            this.s++;
        }
        kml++; k0++; k1++; k2++;
    }
}
</code></pre>

<p>最后的结果截图如下：</br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/t1.png" style="width:420px;"></img></br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cardinal样条曲线的Javascript实现(理论篇)]]></title>
    <link href="http://sparkmorry.github.io/blog/2014/01/29/cardinalyang-tiao-qu-xian-de-javascriptshi-xian-li-lun-pian/"/>
    <updated>2014-01-29T00:46:42+08:00</updated>
    <id>http://sparkmorry.github.io/blog/2014/01/29/cardinalyang-tiao-qu-xian-de-javascriptshi-xian-li-lun-pian</id>
    <content type="html"><![CDATA[<p>首先，要对样条曲线进行插值的原因是：希望通过给定的关键帧点生成一条希望的直线或者曲线。</p>

<p>1.直线插值</p>

<p>　　生成一条直线，给定直线首尾的关键点P0,P1，就能确定这条直线的特性，比如y=kx+b中的斜率k和y轴偏移值b。通过线性（P0,P1线性相关）插值（线性的给中间插上一定数量的点使看起来连续）的方式就可以得到我们要的线段。
<img src="http://sparkmorry.github.io/images/posts/Cardinal/linear.png" style="width:400px;"></img></br>
　　　　　　　　　　图1.1</p>

<p>2.曲线插值</p>

<p>　　但是对于曲线来说比较难确定，我们要对于给定的参数生成唯一的一条曲线并且可以进行方便的调整。这里要确定每一小段曲线，我们需要4个参数，首尾点的位置(参数化后的P(u))及他们的方向（在代数上表现为一阶导数P'(u)的值），并进行平滑的过渡，通过插值来实现对中间点的计算。再将每个小段的曲线进行连接。<br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/segment.png" style="width:220px;"></img></br>
　　　　　图2.1</p>

<p>　　曲线的生成分为两个部分：</p>

<p>　　　　1)对每给定的两个关键帧点之间进行插值得到一段曲线（如图2.1）</br>
　　　　2)连接两两关键帧点的曲线段（如图2.2对曲线段进行连接）<br></p>

<p><img src="http://sparkmorry.github.io/images/posts/Cardinal/kp.png" style="width:400px;"></img></br>
　　　　　　　　图2.2</p>

<p>2.1 三次多项式插值</p>

<p>　　先就两个关键帧点之间的插值做计算。我的理解主要的思想是通过一个参数化的函数曲线去拟合，因此要通过给定的条件（如图2.1中的P(0),P(1),P'(0),P'(1)）去确定这个函数的几个系数。然后通过在中间等间距的插点计算根据函数得到的值确定点的位置。这里选择参数化的三次多项式(）去拟合这条曲线，通过插值来求得中间点的位置。这里，选择三次多项式的原因是：灵活性和计算速度的折中方案。</p>

<p>　　1)与更高次多项式相比，三次样条只需较少的计算与存储空间，并且较为稳定；（只需要一个4*4的基函数矩阵）</br>
　　2)与更低次多项式相比，三次样条在模拟任何曲线形状时显得更灵活。（能满足大多数情况下的曲率调整，比如二次抛物线太对称，一次就是直线）</br></p>

<p>2.2 曲线连续性</p>

<p>　　为了保证分段参数曲线从一段到另一端平滑过渡，可以在连接点处要求各种连续性（可以参考微积分中的函数连续性与导数的关系）。</p>

<p>　　C0连续：有相同的公共点，如图(a)</br>
　　C1连续：有相同的公共点且公共点处有相同的一阶导数（切线斜率），如图(b)</br>
　　C2连续：有相同的公共点且有相同的公共点且公共点处有相同的一阶导数和二阶导数（切线斜率的变化率），如图c <br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/conti.png" style="width:400px;"></img></br>
　　　　　　　　　　图2.3</p>

<p>2.3 自然样条曲线</p>

<p>　　一种简单的插值方法是自然样条插值，就是对如图2.2的一条有n+1个控制点（P0～Pn）n个分段的曲线求三次多项式系数这样就有4n个系数要确定（需要列出4n个方程才能求解出来），通过曲线内部的n－1个点每相邻曲线段公共点的一阶及二阶导数相等且都通过该点，能确定4n－4 [4*(n-1)]个方程，再加上两个“隐含”控制点P0和Pn的二阶导数为0得到4n个方程来求解。缺点是一个点发生了变化其他点都跟着受到影响，这里不做主要展开了。　　　　　　　　　　　　</p>

<p>2.4 Hermite插值</p>

<p>　　为了解决自然样条曲线不能局部控制的缺点，Hermite插值对每个控制点的切线进行了限制为D（由用户给出），这样切线就变成了D*Pk（D斜率＋经过该点），使每个曲线段仅依赖于端点位置的约束。如对每小段曲线的边界条件表示为：</br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/hermite1.png" style="width:120px;"></img></br>
公式1</p>

<p>这里P是向量，对于xy分量来说分别都符合这个边界条件。那么如何保证曲线连续的呢？即对于一个连接点Pk-1来说，这段曲线相应的终点为Pk，在下一段曲线里Pk则作为这段曲线的起始点，保证Pk这个点的函数值和导数值相等就可以。现在点的位置都是Pk，导数值都是DPk，二阶导数值都是D。</p>

<p>可以写出向量方程：</br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/hermite2.png" style="width:300px;"></img></p>

<p>其中P和abcd都是向量，可以再xy分量上（2维情况下）分别表达成这种形式，如，y分量也是类似，组合成的表达，可以获得等价的矩阵形式表达：</p>

<p>以及导数的矩阵表达式：</br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/hermite3.png" style="width:200px;"></img></p>

<p>通过公式1，用u＝0和u＝1替代上面的u就可以得到以下方程：
</br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/hermite4.png" style="width:200px;"></img></br></p>

<p>如Pk=P(0)=[0 0 0 1]*[a b c d]&lsquo;，这里每一个曲线段上的点都被参数化到0～1之间，所以起始点就是P(0),终止点就是P(1)，利用线代方法（参考线性方程求解）通过4个参数对多项式系数求解</br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/hermite5.png" style="width:250px;"></img></br></p>

<p>最后边界条件的表达式如下</br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/hermite6.png" style="width:250px;"></img></br></p>

<p>其中M*P部分就是通过对Hermite函数推导得到的系数矩阵[a b c d]&lsquo;，Pk和Pk+1由用户给定，DPk和DPk+1由给定D值计算获得，根据不同的控制方式可以生成有不同曲线，Cardinal曲线就是Hermite曲线的一种变形，通过对切线斜率进行控制来控制曲线的平滑度。</p>

<p>2.5 Cardinal样条曲线</p>

<p> 　　因为在Hermite曲线中斜率D还是需要用户给出，Cardinal样条曲线可以由相邻两控制点坐标来计算斜率从而使曲线完全由控制点Pk来决定，但是在这里引入了一个t作为在每个公共点上尖锐程度的控制值。</p>

<p>Cardinal曲线的边界条件方程：</br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/Cardinal1.png" style="width:180px;"></img></br>
这样控制点Pk和Pk+1处的斜率和弦PkPk+2和PkPk+1成正比（理解为表示比较接近的控制点对曲线曲率的影响）</br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/Cardinal2.png" style="width:230px;"></img></br>
其中t（称为张量）控制Cardinal样条和输入控制点之间的松紧程度，对曲线的影响程度可以通过下图看出来</br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/Cardinal3.png" style="width:230px;"></img></br>
通过跟Hermite类似的系数求解方式，将边界条件代入可以得到矩阵表达式：</p>

<p>P(u)</br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/Cardinal4.png" style="width:300px;"></img></br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/Cardinal5.png" style="width:220px;"></img>，其中
<img src="http://sparkmorry.github.io/images/posts/Cardinal/Cardinal6.png" style="width:220px;"></img></br></p>
]]></content>
  </entry>
  
</feed>
