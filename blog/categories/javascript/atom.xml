<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Morry's Blog]]></title>
  <link href="http://sparkmorry.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://sparkmorry.github.io/"/>
  <updated>2014-02-26T17:16:16+08:00</updated>
  <id>http://sparkmorry.github.io/</id>
  <author>
    <name><![CDATA[Mengli Xia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript Closure]]></title>
    <link href="http://sparkmorry.github.io/blog/2014/02/26/javascript-closure/"/>
    <updated>2014-02-26T14:46:25+08:00</updated>
    <id>http://sparkmorry.github.io/blog/2014/02/26/javascript-closure</id>
    <content type="html"><![CDATA[<p>It took me days to really understand what a closure is in javascript, and finally I have grokked the core concept. And here are some share to whom is new to the language like me. And this article is for some basic concepts about javascript functions, which is very important when learning the closure.</p>

<p>It is a little hard to get the concept by the definition. I have been reading articles and books these days to understand how javascript function works, which seems so different from other languages like C, Python, etc. The more you get, the more confused you are, as people have really different understandings. Some of them are confusing, and some of them are misunderstanding or even wrong, as everyone makes mistakes. And finally I come to the idea that the best way to learn it is typing the code to you browser and debug to see how it works. It really helps alot. Let me explore it a little bit deeper by the examples.</p>

<p>We first started by some basic concept about javascript function:</p>

<h3>Definition</h3>

<p>There are 3 ways to define a function in javascript:</p>

<ol>
<li>function funcname(para1, para2){ … }</li>
<li>var funcname = function(para1, para2){ … }</li>
<li>var funcname = Function(para1, para2, &ldquo;…&rdquo;);</li>
</ol>


<p>By using the first one, you are creating a function with a name funcname, which is actually a pointer to the function. It is called function <strong>declaration</strong>. By using the second two, you are creating a function which is widely know as a anonymous function. It is called a function <strong>expression</strong>, which returns a pointer, and you can assign it to a variable funcname so as to call(invoke) it. The diffrence between them is how the browser loads them into the execution context:</p>

<p><strong>function declarations loads before any code is executed.</strong></p>

<p><strong>While function expressions loads only when the interpreter reaches that line of code.</strong></p>

<p>By declaring a function, you can call it before you have actually defined. That is because javascript has the mechanisim to raise the function decalration before any code is excuted, while you cannot do that in the second situation.</p>

<h3>Invocation</h3>

<p>The invocation is really different from a difinition, especially in these scrtipt language. A function is never executed until it is invoked. As metioned in <a href="http://book.douban.com/subject/2994925/">Javascript: The Good Parts</a>, there are 4 paterns of invovation in javascript:</p>

<ol>
<li>The Method Invocation Pattern</li>
<li>The Function Invocation Pattern</li>
<li>The Constructor Invocation Pattern</li>
<li>The Apply Invocation Pattern</li>
</ol>


<p>The difference between them is how the special varible <strong>this</strong> is initialized.</p>

<h4>The method invocation pattern</h4>

<p>If an invocation expression con- tains a refinement (that is, a . dot expression or [subscript] expression), it is invoked as a method. A common patern is like:</p>

<pre><code>var num = Myobject.method(para1, para2);
</code></pre>

<p>In this way, the bonus parameter <strong>this</strong> is bound to the object Myobject. That is when you alert(this) inside the function, it will alert Object Myobject.</p>

<h4>The function invocation pattern</h4>

<p>When a function is not the property of an object, then it is invoked as a function:</p>

<pre><code> var sum = add(3, 4);    // sum is 7
</code></pre>

<p>Most of the function are invoked in this way. In this case, the bonus parameter <strong>this</strong> is bound to the global object. That is when you alert(this) inside the function, it will alert Object Global(or mostly the Window object in a browser).</p>

<h4>The constructor invocation patternIf a function is invoked with the new prefix, then a new object will be created with a hidden link to the value of the function’s prototype member, and this will be bound to that new object. That is what confused me at the first glance, about how a constructor works in javascript which is made by a function without a class being defined. The author gave a clear answer that javascript is a prototypal inheritance language while offers an object-making syntax that is reminiscent of the classical languages.</h4>

<h4>The apply invocation patternThe apply method lets us construct an array of arguments to use to invoke a func- tion. It also lets us choose the value of this. The apply method takes two parame- ters. The first is the value that should be bound to this. The second is an array of parameters.</h4>

<p>To identify the differences, I will go to an overall example:Firstly, define an object:</p>

<pre><code>function Person(){  };
</code></pre>

<p>It is just used to demonstrate the object machanism, so we actually have nothing in it.</p>

<p>Secondly, create an instance called p of object Person</p>

<pre><code>var p = new Person();
</code></pre>

<p>Thirdly, create a method <strong>displayneme</strong> by assigning it a function:</p>

<pre><code>p.displayname=function(){

    alert(this); //object p

    return function dis(){ 
        alert(this);  //window
    }
}
var disp = p.displayname();  //get the pointer of the function
disp();   //invoke it
</code></pre>

<p>If we rearrange the order of the code to:</p>

<pre><code>    var p = new Person();
    var disp = p.displayname();  //get the definition of the function
    disp();   //invoke it, error occurs
    p.displayname=function(){

        alert(this); 

        return function dis(){ 
            alert(this);  
        }
    }
    function Person(){
    }
</code></pre>

<p>It will alert an error that Person has no method displayname, but we can still create the p instance before we define an object Person. That is because the constructor function isn raised before the code is executed, while the function p.displayname is loaded when the interpreter reaches that line.</p>

<p>If we look at how the alert box shows us the <strong>this</strong> parameter, we can easily know that the inside the first function, p.displayname, this = object p, while in the second function, dis(), this = global object window. The second function, which is invoked in a function patern, it just doesn&rsquo;t have the access to the object p.</p>

<p>Another way to invoke that inner function is:</p>

<pre><code>p.displayname=function(){

    alert(this); //object p

    return function dis(){ 
        alert(this);  //window
    }();   // invoke directly
}
p.displayname();  //get the pointer of the function
</code></pre>

<p>The function about is called a self-invoking function, by adding a () after the definition of the function. In this way, we don&rsquo;t need to assign the inner function to a variable disp to invoke it, and get the result in the inner function.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[曲线参数化的Javascript实现（代码篇）]]></title>
    <link href="http://sparkmorry.github.io/blog/2014/02/06/qu-xian-can-shu-hua-de-javascriptshi-xian-%28dai-ma-pian-%29/"/>
    <updated>2014-02-06T22:48:03+08:00</updated>
    <id>http://sparkmorry.github.io/blog/2014/02/06/qu-xian-can-shu-hua-de-javascriptshi-xian-(dai-ma-pian-)</id>
    <content type="html"><![CDATA[<p><a href="http://sparkmorry.github.io/blog/2014/01/30/qu-xian-can-shu-hua-de-javascriptshi-xian-%28dai-ma-pian-%29/">在曲线参数化的Javascript实现（理论篇）</a>中推出了曲线弧长积分的公式，以及用二分法通过弧长s来查找样条曲线上对应的u，再求Q(u)的值。弧长积分函数如下：</p>

<p><img src="http://sparkmorry.github.io/images/posts/Param/ds.png" style="width:300px;"></img>，其中<img src="http://sparkmorry.github.io/images/posts/Param/ABCDE.png" style="width:200px;"></img>－－－－－公式1</p>

<p>Simpson展开后</p>

<p><img src="http://sparkmorry.github.io/images/posts/Param/Simpson.png" style="width:300px;"></img>－－－－－－－公式2</p>

<p>这里的f(u)就是上面的弧长s的求值函数，既样条曲线拟合函数Q(u)的积分</p>

<p>这部分具体代码如下：1.计算f(u)的系数ABCDE</p>

<pre><code>CParametric.prototype.SegCoef = function(CSpline, o)
{        
    p0.x=this.k[0]*CSpline.Spline[o].x+this.k[1]*CSpline.Spline[o+1].x+this.k[2]*CSpline.Spline[o+2].x+this.k[3]*CSpline.Spline[o+3].x;
    p1.x=this.k[4]*CSpline.Spline[o].x+this.k[5]*CSpline.Spline[o+1].x+this.k[6]*CSpline.Spline[o+2].x+this.k[7]*CSpline.Spline[o+3].x;
    p2.x=this.k[8]*CSpline.Spline[o].x+this.k[9]*CSpline.Spline[o+1].x+this.k[10]*CSpline.Spline[o+2].x+this.k[11]*CSpline.Spline[o+3].x;
    p3.x=this.k[12]*CSpline.Spline[o].x+this.k[13]*CSpline.Spline[o+1].x+this.k[14]*CSpline.Spline[o+2].x+this.k[15]*CSpline.Spline[o+3].x;

    p0.y=this.k[0]*CSpline.Spline[o].y+this.k[1]*CSpline.Spline[o+1].y+this.k[2]*CSpline.Spline[o+2].y+this.k[3]*CSpline.Spline[o+3].y;
    p1.y=this.k[4]*CSpline.Spline[o].y+this.k[5]*CSpline.Spline[o+1].y+this.k[6]*CSpline.Spline[o+2].y+this.k[7]*CSpline.Spline[o+3].y;
    p2.y=this.k[8]*CSpline.Spline[o].y+this.k[9]*CSpline.Spline[o+1].y+this.k[10]*CSpline.Spline[o+2].y+this.k[11]*CSpline.Spline[o+3].y;
    p3.y=this.k[12]*CSpline.Spline[o].y+this.k[13]*CSpline.Spline[o+1].y+this.k[14]*CSpline.Spline[o+2].y+this.k[15]*CSpline.Spline[o+3].y;

    this.A=9*(p0.x*p0.x+p0.y*p0.y);
    this.B=12*(p0.x*p1.x+p0.y*p1.y);
    this.C=6*(p0.x*p2.x+p0.y*p2.y)+4*(p1.x*p1.x+p1.y*p1.y);
    this.D=4*(p1.x*p2.x+p1.y*p2.y);
    this.E=p2.x*p2.x+p2.y*p2.y;
}
</code></pre>

<p>这里的k数组是Cardinal样条曲线的Mc矩阵，具体内容可以参考Cardinal样条曲线的Javascript实现（理论篇）。这里的p0,p1,p2,p3就是公式1里的ax,ay,bx,by,cx,cy,dx,dy。从而求得积分函数系数。</p>

<p>2.计算扩展的Simpson方法展开后得到的积分函数</p>

<pre><code>CParametric.prototype.ArcLength = function(ustart, uend){
    var h,sum,u;
    var i;
    h=(uend-ustart)*1.0/ITERATION_COUNT; //扩展的Simposon方法的阶数
    sum=0;
    u=ustart+h;

    for(var i=2; i &lt;= ITERATION_COUNT; i++){
        if(!(i&amp;1)){
            sum += 4.0*this.ArcIntergrand(u);
        }
        else{
            sum += 2.0*this.ArcIntergrand(u);
        }
        u += h;
    }
    return(h*this.ArcIntergrand(ustart)+sum+this.ArcIntergrand(uend)/3.0);
}
</code></pre>

<p>这里的ITERATION_COUNT是扩展的Simposon方法的阶数，既公式2中的n，其中的ArcIntergrand(u)就是求fi的值，代码如下：</p>

<pre><code>CParametric.prototype.ArcIntergrand = function(u)
{
    var f;
    f=this.A*u*u*u*u+this.B*u*u*u+this.C*u*u+this.D*u+this.E;
    f=Math.sqrt(f);
    return f;
}
</code></pre>

<p>3.建立s－u索引表</p>

<p>上面的积分函数只能得到没一个曲线段上一个u对应s的值，而一整条样条曲线由多个小曲线段组成，比如计算第二段曲线上累加的s的值的时候只要把前面那段曲线的总长作为一个基数加上去就可以了。建立了s－u索引表之后就可以用二分法来查找每个给定的s对应的u的值了。因为这个函数是严格单调递增的，所以这个索引表肯定是升序的，就可以用二分法来查找。具体代码如下：</p>

<pre><code>CParametric.prototype.SetLengths = function(spline, npoints){
    var no_segments;    //u分割的精度
    var arcLength;
    this.seg_lengths = new Array();

    no_segments = npoints-3;
    arcLength = 0;

    this.seg_lengths[0]=0;
    for(var i=0; i&lt;no_segments; i++){
        this.SegCoef(spline, i);
        arcLength += this.ArcLength(0.,1.);   //ArcLength(0,1)就是前面一个曲线段的总长
        this.seg_lengths[i+1] = arcLength;
    }
    this.total_length = arcLength;
    for(var i=1; i&lt;no_segments; i++){
        this.seg_lengths[i] /= this.total_length;  //s归一化
    }
}
</code></pre>

<p>因为弧长累加的值较大，所以对其进行归一化之后可以得到更标准的弧长值。</p>

<p>4.二分法计算弧长为seg的曲线上的点的位置pt</p>

<pre><code>CParametric.prototype.ArcLengthPoint = function(spline, seg){
    var uL=0., uR=1., usearch;
    var segment_dist, ssearch;
    var segment_no=0;

    do{
        segment_no++;
    }while(this.seg_lengths[segment_no] &lt; seg);
    segment_no --;
    segment_dist = this.total_length*(s-this.seg_lengths[segment_no]);

    this.SegCoef(spline,segment_no);

    do{
        usearch = (uL+uR)/2;
        ssearch = this.ArcLength(uL, usearch);

        if(segment_dist &lt; ssearch+SEARCH_TOL){
            uR=usearch;
        }
        else{
            uL=usearch;
            segment_dist -= ssearch;
        }
    }while((segment_dist&gt;ssearch+SEARCH_TOL) || (segment_dist&lt;ssearch-SEARCH_TOL));
    this.GetPointOnSpline(usearch);

};
</code></pre>

<p>就是普通的二分查找法，给定一个弧长seg，在函数曲线上找到对应的u的值，返回的usearch就是在指定精度var SEARCH_TOL=0.5（可以任意指定）的情况下得到的u的值。再通过调用this.GetPointOnSpline(usearch)函数来计算u=usearch时对应的Q(u)的值。</p>

<pre><code>CParametric.prototype.GetPointOnSpline=function(usearch){
    this.pt[pointnum]= new CPT();
    this.pt[pointnum].x=p0.x*usearch*usearch*usearch+p1.x*usearch*usearch+p2.x*usearch+p3.x;
    this.pt[pointnum].y=p0.y*usearch*usearch*usearch+p1.y*usearch*usearch+p2.y*usearch+p3.y;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-invoking Function in Javascript]]></title>
    <link href="http://sparkmorry.github.io/blog/2014/02/05/self-invoking-function-in-javascript/"/>
    <updated>2014-02-05T23:31:52+08:00</updated>
    <id>http://sparkmorry.github.io/blog/2014/02/05/self-invoking-function-in-javascript</id>
    <content type="html"><![CDATA[<p>在看bootstrap的轮播插件源码的时候发现一种新的自调函数的写法（其实应该不新了），开头的一段就卡住了，原谅我是个菜鸟，就顺便记录一下。stackoverflow上有大神们的回答在这里，轮播的函数形式如下：</p>

<pre><code>!function ($) {
   //code here
}(window.jQuery);
</code></pre>

<p>通常自调函数来模仿块级作用域的方式是：</p>

<pre><code>(function(parameters){
     //这里是块级作用域
})();
</code></pre>

<p>在function外面的这对括号使里面的匿名函数变成了函数表达式，并在之后马上调用。这个相当于：</p>

<pre><code>var Name=function(parameters){
   //这里是块级作用域
}; 
Name();  //调用匿名函数
</code></pre>

<p>函数表达式是在运行中以引用的方式赋值给一个变量的，如上面的函数创建的方式。而这里函数表达式和函数声明是不一样的，函数声明的通常形式如下：</p>

<pre><code>function Name(parameters){
    //code here
}
</code></pre>

<p>函数声明会在程序刚开始运行的时候会被提升（所以可以在执行之后声明），但是并不执行，直到被调用的时候再执行。</p>

<p>所以与括号作用相同的function前面的感叹号，因为括号的优先级高于感叹号，感叹号使得后面的一整串内容变成了一个bool表达式，编译器就会直接运行这个表达式了。这个表达式是个匿名函数，传入了一个参数，这里命名成$，其实无所谓是什么，只是一个形参，并在自调的时候把jQuery对象传进去，这里的jQuery对象是个全局变量，所以是windows.jQuery</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[曲线参数化的Javascript实现（理论篇）]]></title>
    <link href="http://sparkmorry.github.io/blog/2014/01/30/qu-xian-can-shu-hua-de-javascriptshi-xian-%28li-lun-pian-%29/"/>
    <updated>2014-01-30T22:48:03+08:00</updated>
    <id>http://sparkmorry.github.io/blog/2014/01/30/qu-xian-can-shu-hua-de-javascriptshi-xian-(li-lun-pian-)</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cardinal样条曲线的Javascript实现(代码篇)]]></title>
    <link href="http://sparkmorry.github.io/blog/2014/01/29/cardinalyang-tiao-qu-xian-de-javascriptshi-xian-dai-ma-pian/"/>
    <updated>2014-01-29T11:08:00+08:00</updated>
    <id>http://sparkmorry.github.io/blog/2014/01/29/cardinalyang-tiao-qu-xian-de-javascriptshi-xian-dai-ma-pian</id>
    <content type="html"><![CDATA[<p>由上一篇文章得到了Cardinal曲线的矩阵表达式，下面就这个矩阵表达式就可以来对曲线进行插值了。</p>

<p>这里选用了JS来实现，完全是因为之前交作业的时候还不知道怎么在Xcode里建完整的C++OpenGL的项目，所以就用js在浏览器这个最大的跨平台UI上写。。</p>

<p>先看之前得到的Cardinal插值的样条曲线的矩阵，对每一段曲线PkPk+1来说，都可以通过拟合一个被参数化为P(u)函数（0&lt;= u &lt;=1）的图形的形式：</br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/Cardinal5.png" style="width:220px;"></img>，其中
<img src="http://sparkmorry.github.io/images/posts/Cardinal/Cardinal6.png" style="width:220px;"></img></br></p>

<p>同样，M*P得到的是系数矩阵[a b c d]的转置，s是引入的表示每个连接点处曲线尖锐程度的变量－张量</p>

<p>所以我们现在的期望是</p>

<p>输入：n个控制点的xy轴坐标数组x[],y[]，张量tension，每两个控制点之间插入的密度grain</p>

<p>输出：插值好的样条曲线上控制点的一个数组</p>

<p>1.构造函数 function CSpline(x, y, grain, tension, n)</p>

<p>拥有的成员变量和成员函数：</p>

<pre><code>function CSpline(x, y, grain, tension, n) {   
    var jd = new Array(100);  //用户输入的控制点位置数组，临时变量存储
    this.n0=n;   //控制点个数
    this.m = new Array(16);  //Mc矩阵
    this.Spline = new Array(1024);  //插值好的控制点数组
    CSpline.prototype.GetCardinalMatrix = function(a1) {}    //通过给定的tension值生成Mc矩阵
    CSpline.prototype.Matrix = function(a, b, c, d, u){}   //计算P(u)的值，xy分量均相同
    CSpline.prototype.CubicSpline = function(np, knots, grain, tension) {}   //插值函数

    //临时函数，建立曲线控制点数组jd，并调用CubicSpline函数计算插值曲线
    function CSpline(x, y, grain, tension, n)      
    { 
        for(var i=1; i&lt;=np; i++){
        　　jd[i] = new CPT(x[i-1],y[i-1]);   //内部点
        }
        jd[0] = new CPT(x[0],y[0]);  //补上隐含的整条曲线起始点
        jd[np+1] = new CPT(x[np-1],y[np-1]);    //补上隐含的整条曲线终止点
        np=np+2;   
        this.CubicSpline(np, jd, grain, tension);
    }
}      
</code></pre>

<p>这里成员变量通过构造函数分别在实例中存储，而成员函数则在对应的原型函数中存储。</p>

<p>2.计算Mc矩阵函数GetCardinalMatrix = function(a1)</p>

<p>根据输入的平滑度 tension 值计算Mc矩阵</p>

<pre><code>CSpline.prototype.GetCardinalMatrix = function(a1) {
    this.m[0]=-a1; this.m[1]=2.0-a1; this.m[2]=a1-2.; this.m[3]=a1;                 
    this.m[4]=2.*a1; this.m[5]=a1-3.; this.m[8]=-a1; this.m[9]=0.;
    this.m[12]=0.; this.m[13]=1.; this.m[6]=3.-2*a1; this.m[7]=-a1;
    this.m[10]=a1; this.m[11]=0.; this.m[14]=0.; this.m[15]=0.;
} 
</code></pre>

<p>这里m是一个4*4的矩阵，a1表示tension值</p>

<p>3.计算P(u)的值</p>

<p>输入4个点Pk-1,Pk,Pk+1,Pk+2的值(x分量或者y分量，以及参数化好的u值)，返回计算得到的P(u)的值</p>

<pre><code>CSpline.prototype.Matrix = function(p0, p1, p2, p3, u){ 
    //求解系数
    var a, b, c, d;
    a=this.m[0]*p0+this.m[1]*p1+this.m[2]*p2+this.m[3]*p3;    
    b=this.m[4]*p0+this.m[5]*p1+this.m[6]*p2+this.m[7]*p3; 
    c=this.m[8]*p0+this.m[9]*p1+this.m[10]*p2+this.m[11]*p3; 
    d=this.m[12]*p0+this.m[13]*p1+this.m[14]*p2+this.m[15]*p3; 
    return(d+u*(c+u*(b+u*a))); //au^3+bu^2+cu+d
}
</code></pre>

<p>4.主要绘制函数CSpline.prototype.CubicSpline = function(np, knots, grain, tension)</p>

<pre><code>CSpline.prototype.CubicSpline = function(np, knots, grain, tension) {
    alpha = new Array(50);
    var k0, kml, k1, k2;
        //获取Mc矩阵
        this.GetCardinalMatrix(tension);
        //对每两个关键点之间的插值点进行参数化到0～1之间
    for(var i=0; i&lt;grain; i++){
        alpha[i]=i*1.0/grain;
    }
        //从最开始的四个点开始，给第一段曲线插值
    kml = 0;
    k0 = 1;
    k1 = 2;
    k2 = 3;
    this.s = 0; //纪录总共插值后的点数
        //两次循环第一次对输入的控制点遍历，第二次对每两个控制点之间插值，分别计算xy分量上得出的插值后的函数值，k值分别＋1
    for(var i =1; i&lt;this.n0; i++){
        for(var j=0; j&lt;grain; j++){
            cpx = this.Matrix(knots[kml].x, knots[k0].x, knots[k1].x, knots[k2].x, alpha[j]);
            cpy = this.Matrix(knots[kml].y, knots[k0].y, knots[k1].y, knots[k2].y, alpha[j]);
            this.Spline[this.s] = new CPT(cpx, cpy);
            this.s++;
        }
        kml++; k0++; k1++; k2++;
    }
}
</code></pre>

<p>最后的结果截图如下：</br>
<img src="http://sparkmorry.github.io/images/posts/Cardinal/t1.png" style="width:420px;"></img></br></p>
]]></content>
  </entry>
  
</feed>
