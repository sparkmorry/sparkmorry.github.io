<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Morry's Blog]]></title>
  <link href="http://sparkmorry.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://sparkmorry.github.io/"/>
  <updated>2014-04-05T13:11:39+08:00</updated>
  <id>http://sparkmorry.github.io/</id>
  <author>
    <name><![CDATA[Mengli Xia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flask-Peewee]]></title>
    <link href="http://sparkmorry.github.io/blog/2014/04/05/flask-peewee/"/>
    <updated>2014-04-05T12:33:52+08:00</updated>
    <id>http://sparkmorry.github.io/blog/2014/04/05/flask-peewee</id>
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;发现自己这段时间越来越浮躁起来，总是赶着时间完成项目，好久没有安静下来研究一些什么东西了。前几天接到校友会组织创业大赛的一个网站，顺便要帮忙写个后台，因为前两天正好室友实验室课题组要建个主页，也要做个简单的cms管理让她后续好简单点发布。想想功能也简单，就想顺手用最熟悉的框架flask做了吧，虽然知道用flask来作这种东西真是有点作死的节奏。也发现了现在人的审美也慢慢提高，对设计和体验也越来越在乎，好看的网站越来越多，所以很多早几年拿wordpress或者直接拖模版的网页已经让人越来越不能忍了。正好赶上了网页换代的好时代，这样简单的活光在校内的需求都这么大，正好就想自己顺便琢磨琢磨把整个系统完善一下，尽量以后可以多复用一点。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;先总结一下最近研究下来几个插件：</p>

<ol>
<li><a href="http://ckeditor.com/">CKEditor</a></li>
<li><a href="flask-admin.org">Flask-Admin</a>(虽然最后没有用成功)</li>
<li><a href="https://github.com/coleifer/flask-peewee/">Flask-Peewee</a></li>
</ol>


<p>本来是打算用熟悉点的SQLAlchemy＋Admin直接做后台操作的，但是因为Admin的templates实在无法override（也不知道问题到底出在哪了，以后再研究一下），碰巧发现了peewee，真是很轻量级又很赞的组合，直接用peewee-orm可以做好数据库，后来发现用的正好也是SQLAlchemy的内核，但是api感觉简单好用更多。后台操作的用法和Flask-Admin基本差不多，最重要的是example的代表性很好，对flask项目的模块管理又重新学习了一下。</p>

<p>作为一个前端，当然最重要的还是对CKEditor的学习啦，在这里还是赞一下CKEditor4的改版ui，真是很清新。上手很快，基本就是把存成在html格式放在数据库里，提取信息的问题上花时间搜索的有点多，结果居然在django的讨论帖上发现直接{% autoescaping off %}就行了。可能django和flask用的html渲染差不多都是jinja，所以也比较通用。后来查了一下应该也是可以直接通过js的方法来反转义的，就是一些标签的转义而已。还有没解决好的问题就是图片上传和浏览的问题，可能还得用上ckfinder，过几天也得好好研究一下源码。</p>

<p>代码库直接挂在<a href="https://github.com/sparkmorry/zaec">github-zaec</a>上了，学长说交东西不要太快，最好等deadline前几天再给人家，不然老是会被要求修改的（哈哈，真是太机智了）。等过几天，再慢慢把这个系统完善一下，尽量做成一个简单的cms。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Steganography]]></title>
    <link href="http://sparkmorry.github.io/blog/2013/11/12/steganography/"/>
    <updated>2013-11-12T00:42:02+08:00</updated>
    <id>http://sparkmorry.github.io/blog/2013/11/12/steganography</id>
    <content type="html"><![CDATA[<p>今天做DAM的作业，做到图片水印的时候，想起来当初小调同学把言页之庭的种子通过图片发给我。看到下面<a href="http://war.163.com/10/0712/17/6BDLNUB90001123L.html">这个新闻</a>真是觉得碉堡了！！</p>

<p>下面分享一下自己用python实现的隐写术，后面如果有时间会再更深入研究一下解码的问题！！</p>

<p>基本思路是：</p>

<p>1.每张图片都有RGB三个通道，每个像素点的值为3个8位的R/G/B值。</p>

<p>2.把每个RGB值的最后两位&amp;11111100(0xFC)移掉，因为最后两位对图片的影响不大，肉眼基本不可见</p>

<p>3.把要隐藏的图片的RGB值都除以85(255/3=85)，这样正好可以通过2bits(00-11,0-3)来表示图片</p>

<p>4.把得到的值填到之前的2个空bit中</p>

<p>5.等解码的时候只要把之前在原图中藏进去的2位提取出来(&amp;0x3)再＊85就可以得到原图信息</p>

<p>还有一种方法是把信息写道Alpha通道里并按RBG格式编码，解码时用L格式。</p>

<p>但是图片会失真一点，因为毕竟相比8位的存储，2位的存储信息会少很多，但是却已经可以看到80%的图片信息了。所以不得不再赞一下二八法则，20%的编码信息里存储了80%的图片信息啊。</p>

<pre><code>import Image,ImageChops

def waterMark(originFile,markFile):
    origin = Image.open(originFile)
    mark = Image.open(markFile)
    size = mark.size #record the original size of the marked image
    mark = mark.resize(origin.size) #set the pics in same size

    origin.load();
    mark.load()
    source1=origin.split() #split the pic in 3 channel
    source2=mark.split()

    image=[(),(),()]
    waterMark=[(),(),()]
    for x in [0,1,2]: #loop in 3 channel, RGB
        image[x]=source1[x].point(lambda i:i &amp; 0xFC) #remove the last 2 bits of the original image, 0xFC=11111100
        waterMark[x]=source2[x].point(lambda i:i/85) #reduce the RGB value of each channel, 255/3=85

    mark=Image.merge("RGB",waterMark)
    origin=Image.merge("RGB",image)

    result=ImageChops.add(mark,origin)

    return result,size

def deCode(waterMark,size):
    waterMark.load()
    source = waterMark.split()
    originSize=size 

    mark=[(),(),()]
    for x in [0,1,2]:
        mark[x]=source[x].point(lambda i:(i &amp; 0x3)*85) #get back the RGB value of the marked image

    result=Image.merge("RGB",mark)
    result = result.resize(originSize)

    return result

if __name__ == '__main__':
    img1,size = waterMark("avatar2.jpg","green.jpg")
    img2 = deCode(img1,size)

    img1.show() #original image with watermark
    img2.show() #embeded image
</code></pre>
]]></content>
  </entry>
  
</feed>
